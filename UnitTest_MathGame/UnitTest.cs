using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using BusinessLayer;

namespace UnitTest
{
    [TestClass]
    public class UnitTest_MathChallenge
    {
        [TestMethod]
        public void TestAllOperandi()
        {
            bool add = false, sub = false, mul = false, div = false;
            while ((add && sub && mul && div) != true)
            {
                MathChallenge mathChallenge = new MathChallenge();
                int left = mathChallenge.Left;
                int right = mathChallenge.Right;
                char operand = mathChallenge.Operand();

                switch (operand)
                {
                    case '+':
                        mathChallenge.Solve(left + right);
                        Assert.IsTrue(mathChallenge.IsCorrectlySolved());
                        add = true;
                        break;
                    case '-':
                        mathChallenge.Solve(left - right);
                        Assert.IsTrue(mathChallenge.IsCorrectlySolved());
                        sub = true;
                        break;
                    case '*':
                        mathChallenge.Solve(left * right);
                        Assert.IsTrue(mathChallenge.IsCorrectlySolved());
                        mul = true;
                        break;
                    case '/':
                        mathChallenge.Solve(left / right);
                        Assert.IsTrue(mathChallenge.IsCorrectlySolved());
                        div = true;
                        break;
                }
            }
        }

        [TestMethod]
        public void TestScore()
        {
            int counter = 0;
            int totalScore = 0;
            do
            {
                MathChallenge mathChallenge = new MathChallenge();
                if (mathChallenge.Operand() == '+')
                {
                    mathChallenge.Solve(mathChallenge.Left + mathChallenge.Right);
                    totalScore += mathChallenge.Score();
                    counter++;
                }
            } while (counter != 5);
            Assert.AreEqual(totalScore, 5);
        }

        [TestMethod]
        public void TestToString()
        {
            MathChallenge mathChallenge;

            // Test no answer typed ('?')
            while (true)
            {
                mathChallenge = new MathChallenge();
                if (mathChallenge.Operand() == '+')
                {
                    break;
                }
            }
            string test = mathChallenge + "";
            int left = mathChallenge.Left;
            int right = mathChallenge.Right;
            Assert.AreEqual(test, $"{left} + {right} = ?");

            // Test correct answer typed ('V')
            while (true)
            {
                mathChallenge = new MathChallenge();
                if (mathChallenge.Operand() == '+')
                {
                    mathChallenge.Solve(mathChallenge.Left + mathChallenge.Right);
                    break;
                }
            }
            test = mathChallenge + "";
            left = mathChallenge.Left;
            right = mathChallenge.Right;
            Assert.AreEqual(test, $"{left} + {right} = {left + right} [V]");

            // Test wrong answer typed ('X')
            while (true)
            {
                mathChallenge = new MathChallenge();
                if (mathChallenge.Operand() == '+')
                {
                    // Number is larger than can ever be generated by the Random class
                    mathChallenge.Solve(mathChallenge.Left + 1000);
                    break;
                }
            }
            test = mathChallenge + "";
            left = mathChallenge.Left;
            right = mathChallenge.Right;
            Assert.AreEqual(test, $"{left} + {right} = {left + 1000} [X {left + right}]");

        }
    }
    [TestClass]
    public class UnitTest_Game
    {
        [TestMethod]
        public void TestLength()
        {
            Game game = new Game();

            Assert.AreEqual(game.NumberOfChallenges(), 10);
        }
        [TestMethod]
        public void TestSolved()
        {
            Game game = new Game();

            Assert.AreEqual(game.NumberOfSolvedChallenge(), 0);

            game.NextChallenge();
            game.NextChallenge();
            game.NextChallenge();

            Assert.AreEqual(game.NumberOfSolvedChallenge(), 3);

            for (int i = 0; i < 7; i++)
            {
                game.NextChallenge();
            }
            Assert.AreEqual(game.NumberOfSolvedChallenge(), 10);

            game.NextChallenge();
            Assert.AreEqual(game.NumberOfSolvedChallenge(), 10);
        }
        [TestMethod]
        public void TestFinished()
        {
            Game game = new Game();

            Assert.IsFalse(game.IsFinished());
            for (int i = 0; i < 10; i++)
            {
                game.NextChallenge();
            }
            Assert.IsTrue(game.IsFinished());
        }
    }
}
